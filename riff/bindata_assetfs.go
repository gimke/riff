// Code generated by go-bindata.
// sources:
// static/images/favicon.ico
// static/images/logo.svg
// static/images/spinner.svg
// static/index.html
// DO NOT EDIT!

package riff

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticImagesFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x68\x14\x57\x17\x3f\xf9\xe2\x47\xf8\xfc\xf0\x33\x2f\x3e\x7d\xd4\xa4\x50\xab\xf8\x94\x87\x22\xc5\x3e\x44\x68\xf1\xc9\x3c\x94\xee\x4c\xf6\xce\x4e\xac\x16\x2b\x81\x62\xa1\x0f\x3e\xd8\x82\x1b\x1a\x68\xa5\x20\x85\x42\x30\x7d\x90\x62\xd9\x31\xc5\xd2\xda\x1a\xe7\x8e\x4b\x09\x8d\x08\x06\xa4\x12\xf0\x41\xfa\x24\x06\xc1\x3c\x36\x21\x90\x6e\x61\xdd\x5b\x7e\x77\xee\xec\xce\xce\xce\xcc\x4e\x36\xdb\x4e\x26\xf5\xc0\xe1\xce\xce\x9c\x3f\xbf\x7b\xe6\xdc\x73\xff\xcc\x12\xf5\x50\x2f\x0d\x0d\xa1\x1d\xa4\x6f\xf6\x11\x1d\x22\xa2\xc1\x41\xf5\xbb\x9f\xe8\xd1\x3e\xa2\xfe\x7e\xf7\xf7\xf8\x0e\xa2\x4f\x0e\x11\x1d\x20\xa2\x21\x22\x3a\x41\xee\x7d\x49\x2f\xd1\x73\x7a\x4e\x5b\x96\x34\x6d\x76\x6f\xae\x60\x1f\xd3\xf3\xfc\x5d\x8d\xf1\xf3\x39\x83\x5f\x02\xe3\x1a\xf7\xf0\x0c\x32\x69\xe3\xf4\x93\x66\xd8\x43\xb9\xbc\x53\xd4\x18\x5f\xd4\x18\x17\x09\x79\x51\xea\x18\xf6\x50\x5a\xb8\xf5\x02\x7f\x4d\xcb\xf3\x85\x0d\x60\x0e\xe7\x3c\x5f\x80\xad\xbf\x0b\xf7\xe8\xa8\xfd\xb2\xc6\xf8\xf5\x08\x3c\x4f\x75\xc6\xaf\xe4\xf2\xfc\x63\x3d\x6f\x8f\xeb\x8c\x8f\x48\xce\xdb\xe3\xf2\x1e\xe3\x57\x20\x13\xa1\x7b\x1d\xb6\xff\x4a\xec\x3a\xb3\x75\x8d\xf1\xf5\x20\xe6\x5c\x9e\x5f\x18\x2d\xf0\x57\x89\x44\x4f\x7b\x2b\xa2\x07\xb2\xd0\x09\xe9\xcb\x3a\x7c\x74\x1f\xb9\xe8\x41\xfc\x02\xbe\x56\x75\x83\x7f\x38\x32\x32\xbb\xb3\x53\xab\xd0\x85\x0d\xd8\xf2\xdb\x86\xaf\x64\xb1\x48\x88\x9d\xd9\x57\x03\xd8\xe7\x34\x8d\xef\xe9\x8e\x7d\xd4\x2d\xbe\x47\xda\xf4\xf7\x81\xd9\x57\xbb\xd1\x87\x60\xdc\x75\xc6\xbf\x38\x72\xe4\xe7\x1d\xdd\x41\xde\x20\xd8\x84\xed\xd6\xf7\xd0\x39\xa9\x7c\xf7\xc5\x84\x9f\xe9\x1e\xe2\x70\x82\x8f\xe6\x78\x75\x36\x1e\x54\x9d\x59\xf7\xc7\x3d\xa9\xae\x76\xed\xda\x7f\xcc\xf2\xcc\xe1\x31\xc7\x7a\x1f\x8c\x6b\xdc\x4b\xaa\x1f\x78\x0f\xeb\x9d\xd4\xa5\x40\x8d\x9c\x6b\x97\x33\xef\xfc\x78\x79\x97\xe9\x58\x17\x4d\xc7\x7a\x60\x3a\x56\xd5\x74\x2c\x11\xe0\xaa\x7a\x76\x11\xb2\x71\xb6\xe0\x2b\x30\x1e\xae\x6f\x04\xbb\x9c\x9b\x7c\x75\xa6\xdd\x58\x3d\x7e\xcb\x7a\xc3\xe4\xd6\x52\x08\xe6\x70\xe6\xd6\x12\x74\xe2\x6c\xaa\x31\x5d\xaf\x4b\x1b\x99\xe3\xfc\xf3\x2a\xea\x5b\x94\xdc\xe9\xd9\x2f\x77\x9a\x4e\x69\x3a\x31\xee\x16\x2e\x4d\xc3\x46\x94\x7d\x55\x5b\xeb\xf3\x74\x22\xec\x86\x3d\xe4\x9f\x9b\xe2\xea\xfb\xe6\xb0\x37\xfa\x10\x65\x1f\xbe\x9b\xe6\xb8\x04\xeb\x25\xb5\x16\xf3\xea\xd7\x85\x28\x39\x99\x33\x9b\xc6\xee\x72\x5c\x2e\xa9\x79\x5a\xe1\x71\x8a\xed\xf0\xfb\xd7\x91\xee\x9a\xa0\x95\xe4\x58\xdd\x48\xbe\x27\x18\x0f\x51\x63\x1a\x18\xfc\xeb\xd6\x58\xec\xda\xec\x5e\x7f\xee\x44\xcd\x7f\xaa\xce\x74\x07\x7b\x83\x2f\x86\xa3\x12\x3d\x4d\x39\x14\xb3\x7f\x90\xfb\x8b\x46\xbd\xbf\x12\x25\xa7\xea\x60\x34\x96\x9b\x96\x60\x9f\x7d\x27\x46\x3f\xb8\x21\x19\xd7\xb8\xd7\x06\xff\x83\x28\x7f\x6a\xdd\xea\xe6\x50\xc1\x3e\x16\x29\xe7\xee\x9b\x62\xe7\x6e\x39\x37\x85\xd7\xf7\x3a\x76\xfd\xbd\xd9\x96\xf5\x31\xee\xb5\xe9\x43\x35\x6a\x8e\xf3\xaf\x61\x80\x31\x0a\x3f\xf6\x79\x0d\x39\x7b\x3c\x34\xf6\xe5\x99\xc3\x71\x71\x44\xac\xa3\xf6\x2a\xf2\x3d\xc4\xbd\x83\xf2\xcc\xe1\xf0\xb8\xda\xe3\x3e\x3b\xe7\xa3\xf0\xab\xbd\xaa\x97\x3f\x23\x61\x32\x72\x3d\x10\x83\x01\xf9\x12\x85\x1f\xcf\xe2\x74\x61\x3b\x14\x3f\xe3\x23\xf5\xbc\x30\xf8\xa5\xed\x8a\x3f\xeb\xf9\x93\xf5\xf1\x9b\xf5\xfa\x99\xf5\xf9\x8b\x32\xbe\x7e\xa0\xed\xb0\x7e\xcb\xf8\xfa\x99\x32\xbe\x7f\xa1\x6d\xb0\x7f\xa4\x8c\xef\xdf\x69\x1b\x9c\x9f\x50\xc6\xcf\xaf\xea\xf6\x32\x7c\x7e\xe8\x52\xb6\xcf\x6f\x5d\xca\xf2\xf9\x79\x83\xb2\xfb\xfd\xa2\x41\x59\xfe\x7e\xe4\xa7\xac\x7e\xbf\x0b\x52\x56\xbf\x9f\x86\x51\x16\xbf\x5f\x3f\xa7\x7f\x36\x09\x49\x61\x6d\xad\xe8\xb6\xf3\xbd\xb2\xad\x11\x15\xd1\x56\x7a\xe7\x07\xd0\xae\x0c\x57\x77\xa3\xbd\x2d\xc4\x24\xda\x49\x21\x6e\xa3\xed\x13\xe2\x31\xda\x01\x21\x2a\x82\xa8\x86\xb6\x48\x54\x1d\x7e\xdc\x57\x1d\x26\xaa\x16\xe7\x7b\x6b\xc3\x44\x15\x29\x43\x54\x81\x5d\x5f\xbb\x5a\x25\x1a\xfe\x9c\x68\xb5\x42\x34\x10\xd2\xae\xa1\x5d\x24\x7a\x82\x76\xa1\xd1\x7a\xf7\xa3\xf4\x3c\xbb\x41\x7f\x1e\x0e\x0f\x97\x87\xd3\xc3\xed\xf5\xa3\xde\x2f\xaf\x9f\x5e\xbf\xbd\x38\x78\x71\xf1\xe2\xe4\xc5\xad\x1e\xc7\xf0\x38\x1f\x20\x92\xff\xce\x3a\xe2\xff\x9f\x56\x7f\xda\x59\x91\x6d\x3a\x7d\xfa\x97\x7f\xe7\x46\xf9\x51\xdd\xb0\x27\x73\x8c\x5f\xd6\x18\xb7\xc1\xb8\x96\xf7\x46\xf9\x51\xc8\x74\xdb\x6f\xa1\xc0\xff\xa7\x33\x7b\x4a\x63\x7c\x25\xc1\x1c\xb6\x02\x59\xe8\x74\xc3\x77\x2e\xef\xbc\xae\x19\x7c\x49\xd9\x7e\xa6\x31\x7e\x47\x63\xce\x59\xcc\x39\x6f\xe5\xed\x57\xc0\xee\xf9\x9c\x73\xd6\x7d\x26\x65\x04\x74\xa0\xdb\xa9\xdf\xb1\xb1\xf2\x7f\x55\x9f\x6b\xca\x5e\x39\xc9\x1c\x27\xcf\xda\x20\xeb\xe2\xad\xc1\x06\x6c\x6d\xd4\xb7\xc6\xf8\x43\x65\x63\x2d\xea\xcc\x37\x8e\xd4\xd9\xec\x9a\xb2\xf1\x70\x23\x18\x54\xbf\xd1\xe7\xfb\xda\x58\xf9\xc5\x8d\xfa\xf6\x08\xba\xd2\x86\xbb\xdf\x9b\x4a\xa2\x23\xdf\xb7\x1b\xf3\xb5\x28\xdf\x05\x5e\x3a\x58\x70\x4a\x6f\x9b\x4e\x69\x0a\x3c\xe6\x58\x27\x70\x2f\x12\x83\x1b\x87\x5a\xbb\x7c\x40\xce\x7a\xb9\x16\x16\xf3\xe3\x3f\x7d\xbd\xd7\x74\xac\x72\xcc\x19\x4a\x19\x32\x41\xbd\xfa\x39\xb9\xc1\x97\xe2\xc6\x85\x2f\xee\xe5\x16\x6c\x4e\xe9\x4d\xd3\xb1\x56\x13\x9c\xe3\xac\x42\xb6\x25\x0e\x2a\x27\xa3\xde\x03\xea\x86\x1a\xdf\xcf\x82\x79\xae\xfa\x9d\xc4\x77\x1d\x43\x30\x0e\xea\x0c\x1a\x63\x73\x25\xac\x46\xa1\x76\xa9\x5c\xbd\x13\x7c\xd6\x26\xe6\x91\xef\xa2\x25\x06\x6e\x7d\x10\xf0\xd5\x12\x7b\xc3\x9e\x74\xfd\x3b\x67\x9b\xe2\xce\x4b\x07\x43\xed\xdb\x96\x30\xa6\xbe\x95\x8c\xeb\x30\x99\x60\x4e\xaa\x1a\x25\xe0\xab\xa5\xff\x6e\x3d\x6f\x39\xc7\x47\x6e\x87\xf9\xd6\x4f\xdd\x6c\x9c\x7d\x9c\xba\x19\x8a\x01\xba\x4d\x3e\xd4\x77\x0c\xf8\x0a\x89\x0d\xe6\x12\x81\x7a\xda\x1c\x7b\x8c\xb1\x66\xbb\xe8\x73\xb0\xee\xcb\x38\xb4\x9e\x83\x36\xe5\x1a\x6c\x2b\x79\x7b\xab\xf9\x4f\x3b\xfe\xa9\xe7\x5f\xca\xe3\x2f\xed\xfa\x43\x29\xd7\x5f\xda\x02\xf3\x0f\xa5\x3c\xff\xd6\xf1\xa6\xb8\xfe\xa0\x2d\xb0\xfe\xa2\x94\xd7\x9f\x7e\x4a\x6b\xfd\xed\xa7\x34\xf7\x1f\x7e\x4a\x6b\xff\xb5\x9d\x49\x78\x54\x19\x70\x8f\x16\x3e\x5d\x12\xb5\x81\x4a\xb1\x5a\xac\x0d\x57\x84\x18\xf8\xa3\x56\xfc\x6a\x6d\x65\xf7\xe2\x93\xc7\x7d\x0b\xcb\xf3\xbd\xcb\xcb\x13\x3d\xcb\x8b\x13\x3d\x6b\x92\x89\x5c\x56\xbf\xf1\x0c\x32\x90\x85\x0e\x74\x61\x03\xb6\x60\x13\xb6\xa5\x0f\xf8\x52\x74\x40\x1d\x4b\x0c\xfa\xcf\x29\xba\xfe\x15\xa9\x95\x26\x26\x26\xfe\xa5\x33\xc7\xd4\x99\x3d\xad\x19\xfc\x1e\x18\xd7\xb8\x87\x67\x71\xba\x9a\xe9\xec\xd7\x18\xbf\xab\x31\x7e\x23\xc7\xec\x93\xf2\xdb\xbc\x61\x0f\xc9\x6b\xc6\x6f\xc8\x67\xa6\xb3\x3f\x46\xf7\xa9\xce\x1c\x16\x65\x1f\xcf\xe4\xf7\x80\x80\x0d\xe0\x82\x6d\x4f\xf7\x0c\xe7\x7d\x63\x4e\xe9\x9c\xe9\x58\x73\x60\x5c\xe3\x9e\xcf\xc6\x5d\x7f\x5f\xd0\x37\xe0\xf3\x74\x4d\xc7\xba\x1f\x32\x87\xdd\xf7\x6c\x40\x16\x3a\x0d\x7d\x7b\x1a\x7d\x24\xb9\x2e\x93\x7e\xdd\x75\xce\xf7\x33\x92\x1b\xeb\xae\xd2\x39\x92\x6b\x3a\xfb\xa4\xff\x7f\x55\x6e\x9c\xdd\xb3\x75\x85\x59\xea\x69\x26\x97\xec\xb3\x31\x47\xde\x7f\x1e\x0c\x7e\xaf\x5b\xfa\x9b\xc5\xbf\xd9\xf8\x6d\xf6\xfd\x6d\x36\x7f\x02\x36\x3a\xca\x5f\x7f\x5f\x3a\x1d\x3f\x9d\x90\x10\x44\xd5\x61\xb7\xe0\xfc\xf6\x3b\xd1\xa3\x8f\x88\x7e\xfd\x3f\xd1\xad\x17\x88\x7e\xd8\xe5\x32\xae\x71\x0f\xcf\x20\x03\x59\xe8\x40\xf7\xcf\x00\x00\x00\xff\xff\x15\x7d\x11\xb5\xee\x3a\x00\x00")

func staticImagesFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticImagesFaviconIco,
		"static/images/favicon.ico",
	)
}

func staticImagesFaviconIco() (*asset, error) {
	bytes, err := staticImagesFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/images/favicon.ico", size: 15086, mode: os.FileMode(420), modTime: time.Unix(1515107376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticImagesLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\xc1\x4a\xc4\x30\x10\x06\xe0\xbb\x4f\x31\xcc\x9e\xdd\x8c\xeb\x66\xd5\xda\xe9\xc1\x37\x69\xd3\x98\x86\xc6\x44\x92\xd8\xb4\x6f\x2f\xb5\xd4\x83\x0a\xb2\x87\x61\x60\x60\x3e\x7e\xfe\x3a\x4d\x06\xe6\x37\xe7\x13\xe3\x90\xf3\x7b\x25\x44\x29\xe5\x58\xee\x8f\x21\x1a\x71\x22\x22\x91\x26\x83\x30\x59\x5d\x5e\xc2\xcc\x48\x40\x70\x47\x5f\x83\x90\xf2\xe2\x34\x63\xd7\xaa\xd1\xc4\xf0\xe1\xfb\x0a\x7c\xf0\xfa\x19\x9b\x1b\x00\x80\x5a\xd9\xa8\x9c\x06\x35\x33\x4a\x42\x50\xcb\xb6\x23\xe3\x99\x10\x5e\xad\x73\x8c\xeb\xc3\x2a\xc5\x30\x6a\xc6\x43\x77\x91\x4f\x52\xee\x87\xdb\x62\xfb\x3c\x30\x5e\x76\x51\x6c\xe4\xbf\xfe\xe9\xbc\xfb\x87\x56\x76\x0f\x52\xfd\x14\xe9\x5a\xf1\xf1\x1b\xfc\x3b\xe2\x6f\xb0\x5e\xab\x6b\x3e\x03\x00\x00\xff\xff\x6a\xf3\x25\xcc\x62\x01\x00\x00")

func staticImagesLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_staticImagesLogoSvg,
		"static/images/logo.svg",
	)
}

func staticImagesLogoSvg() (*asset, error) {
	bytes, err := staticImagesLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/images/logo.svg", size: 354, mode: os.FileMode(420), modTime: time.Unix(1515132670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticImagesSpinnerSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xb1\x4e\xc3\x30\x10\x40\x77\xbe\xe2\x74\xcc\x4d\x9c\xb6\xa6\xa5\x8d\x3b\xc0\x0c\x0b\xfc\x80\xe3\x5c\x53\xab\x8e\x1d\xd9\x4e\xd2\xfc\x3d\x4a\x5a\xc4\x04\x05\xb1\xc0\x10\x45\x3e\xd9\x4f\xcf\x7a\x72\x1e\xba\x0a\x4e\xb5\xb1\x41\xe0\x21\xc6\x66\x93\xa6\x7d\xdf\x27\xfd\x22\x71\xbe\x4a\xe7\x8c\xb1\x34\x74\x15\x42\xa7\xa9\x7f\x70\x27\x81\x0c\x18\x64\x6c\xfa\x10\x42\x1c\x0c\x09\x2c\xa4\x3a\x56\xde\xb5\xb6\xdc\x80\x75\x96\xb6\xb8\xbb\x01\x00\xc8\x95\xf6\xca\x10\xa8\x93\x40\xce\x10\xd4\x70\xfe\x7b\x81\xd9\x2a\x61\x7c\x81\xb0\xd7\xc6\x08\x1c\x0f\x8d\x34\xef\x8e\x24\xf0\xb6\xb8\xe3\xf7\x9c\xbf\x0f\x66\xbd\x2e\xe3\x41\xe0\xfc\x42\x9d\xc8\xd2\xea\x5a\x46\x02\x19\xa3\xd7\x45\x1b\xe9\x59\xd6\x24\xd0\x23\x28\x69\xd4\x93\x2b\x49\x60\x68\x8c\x1e\xb9\x9d\x34\x2d\x05\x81\x6c\xbb\x64\x08\x47\x1a\x5e\x75\x7d\x5e\x67\x08\x65\xeb\x47\xf4\x38\x7e\x99\xf6\x87\xe9\x8e\xc9\x1c\x58\xb2\x86\x0c\xa1\xa0\x4a\x5b\x81\xb3\x2c\x20\x78\x6a\x48\xc6\x47\xd7\xda\x28\x50\xdb\x92\xf6\xda\xea\x48\xb8\xcb\xd3\x8b\xd0\x75\x45\xd7\x48\xa5\xe3\xf0\x95\x68\xb6\xfd\xa6\xe7\x68\xf9\x1b\xcf\x3c\x3d\x17\xba\x9a\x6b\xc1\x13\xbe\x5e\x7e\x92\x4b\xf2\x62\xc5\xd5\xdf\xca\xc5\xfe\x47\xad\x9f\x68\x7e\xc4\xca\xc7\x37\xb9\x7b\x0b\x00\x00\xff\xff\x70\x88\x7a\x77\xbb\x03\x00\x00")

func staticImagesSpinnerSvgBytes() ([]byte, error) {
	return bindataRead(
		_staticImagesSpinnerSvg,
		"static/images/spinner.svg",
	)
}

func staticImagesSpinnerSvg() (*asset, error) {
	bytes, err := staticImagesSpinnerSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/images/spinner.svg", size: 955, mode: os.FileMode(420), modTime: time.Unix(1515084081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\xc6\x12\x37\x52\xb7\xb0\xed\x2e\xc5\x0e\x42\x65\x91\x38\x81\xd0\xae\x04\x47\xc7\x9e\x26\xb3\xeb\xd8\x26\x9e\xa6\xad\x10\xff\x1d\xa5\x69\x51\x02\xf1\xc5\xca\xf7\xfc\x3c\xf3\x34\x8e\x7c\xf1\xf1\xcb\xf6\xe1\xc7\xd7\x7b\x56\x51\xed\xf2\x99\xbc\x6e\xa0\x6d\x3e\x63\x8c\x31\x59\x03\x69\x66\x2a\xdd\x24\x20\xc5\x1f\x1f\x3e\x65\x77\x7c\x28\x55\x44\x31\x83\x9f\x7b\x6c\x15\xff\x9e\x3d\x7e\xc8\xb6\xa1\x8e\x9a\xb0\x70\xc0\x99\x09\x9e\xc0\x93\xe2\x9f\xef\x15\xd8\x12\x46\x4e\xaf\x6b\x50\xbc\x45\x38\xc4\xd0\xd0\xe0\x30\x7a\x24\xd4\x2e\x4b\x46\x3b\x50\xcb\x57\xac\xd6\x47\xac\xf7\xf5\x00\xa0\x1f\x83\x7d\x82\xe6\xfc\xa5\x0b\x07\xca\x87\x6b\x21\x42\x72\x90\x7f\xc3\xdd\x8e\x6d\x83\x4f\xc1\x81\x14\x3d\xeb\xf5\x44\x27\x07\x8c\x4e\x11\x14\x27\x38\x92\x30\x29\x5d\xbc\xdd\x9a\xa7\x88\xde\x43\x73\x68\x74\x64\xbf\xfe\xe2\x6e\xc5\x90\x90\x30\xf8\x0d\xd3\x45\x0a\x6e\x4f\xf0\x6e\xa4\x53\x88\x1b\xb6\x5a\xbc\x1c\x53\x07\x3b\x9a\xc0\xb5\x6e\x4a\xf4\xd9\xd9\x93\xad\x16\xf1\x38\x29\xf7\xe6\x09\xbd\x4f\x0f\x0e\x0c\x6d\x98\x0f\x7e\xd0\xca\xef\xe9\x2c\x58\x97\xff\xe4\xb1\x98\xa2\xd3\xa7\x0d\x2b\x5c\x30\xcf\xe3\xfb\x0f\x68\xa9\xda\xb0\xe5\xe2\xbf\xca\x15\x60\x59\xd1\xa4\x94\x1d\xa0\x78\x46\xca\xce\xcd\xd9\x46\x97\xd3\xad\x49\x71\x9e\x41\x3e\x93\xa2\x7f\x75\xb2\x08\xf6\x94\xcf\xa4\xc5\x96\xa1\x55\xbc\x09\x81\xae\xe3\xec\x98\x71\x3a\x25\xc5\x07\x69\x78\x2e\xbb\x3c\xa9\x31\x8a\x8b\x44\x9a\xd0\x08\xac\x75\x09\x49\x5c\x4e\xcd\x53\x5b\x72\x26\x72\x29\x2c\xb6\x5d\xa9\x7e\x4b\xa6\xc1\x48\xc3\xf1\x3f\xe9\x56\xf7\x94\x8f\xef\xb3\x98\x48\x98\xfe\x09\xcd\x9f\xd2\xfb\xb5\x2d\x6e\x6e\xf4\x5b\xb3\x5e\xdd\xad\x97\xc5\x9b\xf5\xeb\xdb\xdb\x15\xcf\xa5\xe8\xcd\x5d\x89\x4b\x0c\x71\xfe\xa5\xfe\x04\x00\x00\xff\xff\x92\x68\xf6\xb0\x69\x03\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 873, mode: os.FileMode(420), modTime: time.Unix(1515134099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/images/favicon.ico": staticImagesFaviconIco,
	"static/images/logo.svg":    staticImagesLogoSvg,
	"static/images/spinner.svg": staticImagesSpinnerSvg,
	"static/index.html":         staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"images": &bintree{nil, map[string]*bintree{
			"favicon.ico": &bintree{staticImagesFaviconIco, map[string]*bintree{}},
			"logo.svg":    &bintree{staticImagesLogoSvg, map[string]*bintree{}},
			"spinner.svg": &bintree{staticImagesSpinnerSvg, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
