// Code generated by go-bindata.
// sources:
// static/images/favicon.ico
// static/images/logo.svg
// static/images/spinner.svg
// static/index.html
// DO NOT EDIT!

package riff

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticImagesFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x3f\x6b\x14\x5f\x14\x3d\xfb\xdb\xdd\xe1\x07\x16\x8e\x41\x2c\x8c\x09\x0b\x36\x82\x95\xa2\x9d\x68\x21\xfe\x25\x85\x1b\xbd\xd9\xb9\x38\x90\x80\x8d\x44\x62\xa3\xa5\x68\xd6\xca\x0f\xb1\x09\x11\x32\x9a\x2e\x06\xf4\x4c\x8a\x64\x77\x51\xc8\x87\x08\xfa\x01\x44\x04\xed\x85\xc8\x7d\x73\x47\x07\x8d\xc1\x38\x70\xd8\xb7\xf7\x9d\xf3\xde\x99\x7b\xcf\x00\x35\xd4\x10\xc7\xf6\xdb\xc2\xdd\x06\x70\x04\xc0\x09\x00\x31\x80\x16\x8a\x7a\x78\x1a\xc0\xc8\x81\x02\x7f\x7a\x44\x59\x22\x12\xe5\x88\x23\x2a\xeb\x7f\xa1\x3b\x26\xca\x39\x51\xbe\x14\x65\xee\x58\x11\xe5\x7d\x51\x8e\xed\x76\x8e\xd7\x6a\xa2\xbc\x2e\xca\xbe\x28\x17\x45\x79\x4b\x12\x9e\x0a\x50\xde\x14\xe5\x82\x28\x07\xa2\x9c\x70\xee\xaf\xf7\x9a\x76\x2b\x70\x3b\x6c\x9c\xc7\x67\x4c\x6f\x2f\x46\x86\x73\xf8\x0a\xab\x89\xb2\xed\x9c\x89\x8a\xce\x30\x2a\xca\x4d\xbb\x33\x79\xbc\x8a\x34\xcf\xc6\xd3\x3c\x7b\x9a\xe6\x59\xdf\x61\xeb\xf1\xe4\xd1\x2b\xe3\x4e\xba\xc7\xb1\x8a\xfe\x9e\x79\x6e\x1f\x1f\xd6\xd3\xf5\xa0\x1d\xa4\x79\xb6\x93\xae\x3b\xf2\x80\x81\xed\xdd\x38\xfc\xee\x3f\x51\xf6\xbc\x1f\xa6\x35\x5f\x99\x28\x3b\x9d\x07\x6b\x76\x77\x37\xf0\x99\xed\xdc\x5e\x5e\x09\xb0\xb5\x9f\xd1\xed\x3c\x5c\x43\xe8\x4d\xd1\xdf\xa6\x28\x63\x51\xbe\x91\x84\x67\x66\x3e\xf5\xa2\x34\xcf\x36\xed\x4e\xd3\x4d\xdd\x79\x1d\x10\xce\x28\x7c\x6c\xcc\x7c\xec\x45\x92\xf0\xb4\x28\xe9\xb3\x2d\xf5\x67\xff\x51\x6f\xfe\x97\x45\x99\xec\xc3\xbf\x88\xf2\x85\xfb\xb7\xff\xb3\xa2\x5c\x9a\x3c\xd9\x6f\xec\xd1\xbf\xbe\xed\xb5\x5b\xc3\xba\xe7\x63\xae\xd2\xff\xa3\xa2\xdc\xb0\x1e\x26\xf3\x3f\xe6\xd7\x0d\xef\x52\xa0\x1b\xe6\xf7\x64\xb5\xec\x5d\xdf\x73\x5a\xcd\xc0\x55\xcf\xc6\x94\x74\xd8\xbc\x8c\x6d\x4c\x7f\x58\x88\x0c\x97\xf0\xde\xf2\xd3\x74\xed\x96\x67\x0d\xbb\x64\xf0\x8a\xfb\x78\x6e\x5e\x6c\x26\x01\xb6\x56\x2e\x79\xc6\xae\xed\xf1\x0d\x94\xef\x32\xeb\x99\xa0\x23\xf3\x8c\x8d\xee\xe3\x3b\x2c\xb3\x11\x57\xfa\xfc\x1b\xff\xdb\x05\xe0\xcb\x41\x60\x58\x07\xde\x5e\x04\x9e\x1d\x02\xe6\x6b\x40\xfc\xff\x4f\x8e\xad\xad\x66\x7b\xc6\x31\xae\x69\x4c\xfb\x3d\x00\x00\xff\xff\x7e\x2e\x1d\x44\x7e\x04\x00\x00")

func staticImagesFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticImagesFaviconIco,
		"static/images/favicon.ico",
	)
}

func staticImagesFaviconIco() (*asset, error) {
	bytes, err := staticImagesFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/images/favicon.ico", size: 1150, mode: os.FileMode(438), modTime: time.Unix(1515055298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticImagesLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\xc1\x4a\xc4\x30\x10\x06\xe0\xbb\x4f\x31\xcc\x9e\xdd\x8c\xeb\x66\xd5\xda\xe9\xc1\x37\x69\xd3\x98\x86\xc6\x44\x92\xd8\xb4\x6f\x2f\xb5\xd4\x83\x0a\xb2\x87\x61\x60\x60\x3e\x7e\xfe\x3a\x4d\x06\xe6\x37\xe7\x13\xe3\x90\xf3\x7b\x25\x44\x29\xe5\x58\xee\x8f\x21\x1a\x71\x22\x22\x91\x26\x83\x30\x59\x5d\x5e\xc2\xcc\x48\x40\x70\x47\x5f\x83\x90\xf2\xe2\x34\x63\xd7\xaa\xd1\xc4\xf0\xe1\xfb\x0a\x7c\xf0\xfa\x19\x9b\x1b\x00\x80\x5a\xd9\xa8\x9c\x06\x35\x33\x4a\x42\x50\xcb\xb6\x23\xe3\x99\x10\x5e\xad\x73\x8c\xeb\xc3\x2a\xc5\x30\x6a\xc6\x43\x77\x91\x4f\x52\xee\x87\xdb\x62\xfb\x3c\x30\x5e\x76\x51\x6c\xe4\xbf\xfe\xe9\xbc\xfb\x87\x56\x76\x0f\x52\xfd\x14\xe9\x5a\xf1\xf1\x1b\xfc\x3b\xe2\x6f\xb0\x5e\xab\x6b\x3e\x03\x00\x00\xff\xff\x6a\xf3\x25\xcc\x62\x01\x00\x00")

func staticImagesLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_staticImagesLogoSvg,
		"static/images/logo.svg",
	)
}

func staticImagesLogoSvg() (*asset, error) {
	bytes, err := staticImagesLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/images/logo.svg", size: 354, mode: os.FileMode(420), modTime: time.Unix(1515083940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticImagesSpinnerSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xb1\x4e\xc3\x30\x10\x40\x77\xbe\xe2\x74\xcc\x4d\x9c\xb6\xa6\xa5\x8d\x3b\xc0\x0c\x0b\xfc\x80\xe3\x5c\x53\xab\x8e\x1d\xd9\x4e\xd2\xfc\x3d\x4a\x5a\xc4\x04\x05\xb1\xc0\x10\x45\x3e\xd9\x4f\xcf\x7a\x72\x1e\xba\x0a\x4e\xb5\xb1\x41\xe0\x21\xc6\x66\x93\xa6\x7d\xdf\x27\xfd\x22\x71\xbe\x4a\xe7\x8c\xb1\x34\x74\x15\x42\xa7\xa9\x7f\x70\x27\x81\x0c\x18\x64\x6c\xfa\x10\x42\x1c\x0c\x09\x2c\xa4\x3a\x56\xde\xb5\xb6\xdc\x80\x75\x96\xb6\xb8\xbb\x01\x00\xc8\x95\xf6\xca\x10\xa8\x93\x40\xce\x10\xd4\x70\xfe\x7b\x81\xd9\x2a\x61\x7c\x81\xb0\xd7\xc6\x08\x1c\x0f\x8d\x34\xef\x8e\x24\xf0\xb6\xb8\xe3\xf7\x9c\xbf\x0f\x66\xbd\x2e\xe3\x41\xe0\xfc\x42\x9d\xc8\xd2\xea\x5a\x46\x02\x19\xa3\xd7\x45\x1b\xe9\x59\xd6\x24\xd0\x23\x28\x69\xd4\x93\x2b\x49\x60\x68\x8c\x1e\xb9\x9d\x34\x2d\x05\x81\x6c\xbb\x64\x08\x47\x1a\x5e\x75\x7d\x5e\x67\x08\x65\xeb\x47\xf4\x38\x7e\x99\xf6\x87\xe9\x8e\xc9\x1c\x58\xb2\x86\x0c\xa1\xa0\x4a\x5b\x81\xb3\x2c\x20\x78\x6a\x48\xc6\x47\xd7\xda\x28\x50\xdb\x92\xf6\xda\xea\x48\xb8\xcb\xd3\x8b\xd0\x75\x45\xd7\x48\xa5\xe3\xf0\x95\x68\xb6\xfd\xa6\xe7\x68\xf9\x1b\xcf\x3c\x3d\x17\xba\x9a\x6b\xc1\x13\xbe\x5e\x7e\x92\x4b\xf2\x62\xc5\xd5\xdf\xca\xc5\xfe\x47\xad\x9f\x68\x7e\xc4\xca\xc7\x37\xb9\x7b\x0b\x00\x00\xff\xff\x70\x88\x7a\x77\xbb\x03\x00\x00")

func staticImagesSpinnerSvgBytes() ([]byte, error) {
	return bindataRead(
		_staticImagesSpinnerSvg,
		"static/images/spinner.svg",
	)
}

func staticImagesSpinnerSvg() (*asset, error) {
	bytes, err := staticImagesSpinnerSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/images/spinner.svg", size: 955, mode: os.FileMode(420), modTime: time.Unix(1515084081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x41\x8f\xd3\x3c\x10\xbd\xf7\x57\xf8\xb3\xf4\xdd\x48\xdd\xc2\xb6\xbb\x94\x38\x08\x95\x45\xe2\x04\x42\xbb\x12\x1c\x1d\x67\x9a\xcc\xd6\xb1\x8d\x3d\x4d\x5b\x21\xfe\x3b\x4a\xd2\x2e\x09\x04\x5f\xac\xbc\x37\x33\x6f\x5e\x66\x9c\xfe\xf7\xfe\xd3\xf6\xe1\xdb\xe7\x7b\x56\x51\x6d\xb2\x59\x7a\xbd\x40\x15\xd9\x8c\x31\xc6\xd2\x1a\x48\x31\x5d\xa9\x10\x81\x24\x7f\x7c\xf8\x90\xdc\xf1\x21\x55\x11\xf9\x04\xbe\x1f\xb0\x91\xfc\x6b\xf2\xf8\x2e\xd9\xba\xda\x2b\xc2\xdc\x00\x67\xda\x59\x02\x4b\x92\x7f\xbc\x97\x50\x94\x30\xca\xb4\xaa\x06\xc9\x1b\x84\xa3\x77\x81\x06\xc1\x68\x91\x50\x99\x24\x6a\x65\x40\x2e\x5f\xb0\x5a\x9d\xb0\x3e\xd4\x03\x00\xed\x18\x38\x44\x08\xdd\x97\xca\x0d\x48\xeb\xae\x42\x84\x64\x20\xfb\x82\xbb\x1d\xdb\x3a\x1b\x9d\x81\x54\xf4\x58\xcf\x1b\xb4\x7b\x56\x05\xd8\x49\x2e\x22\x29\x42\x2d\x0a\x8c\x24\x74\x1f\x3c\xd7\x31\xbe\x5d\x17\xf9\xcd\x8d\x7a\xad\xd7\xab\xbb\xf5\x32\x7f\xb5\x7e\x79\x7b\xbb\xe2\x2c\x80\x91\x3c\xd2\xd9\x40\xac\x00\xe8\x2a\xd8\x21\x8c\xce\x1e\x24\x27\x38\x91\xd0\x31\x5e\xb8\xf6\xcc\xa3\x47\x6b\x21\x1c\x83\xf2\xec\xc7\x33\xdc\x1e\xef\x22\x12\x3a\xbb\x61\x2a\x8f\xce\x1c\x08\xde\x8c\x78\x72\x7e\xc3\x56\x8b\xff\xc7\xa8\x81\x1d\x4d\xc0\xb5\x0a\x25\xda\xa4\xcb\x49\x56\x0b\x7f\x9a\xa4\xfb\xe4\x09\xbe\xff\x9d\x60\x40\xd3\x86\x59\x67\x07\xad\xfc\x9c\xf6\x82\x75\xf9\x87\x9f\x02\xa3\x37\xea\xbc\x61\xb9\x71\x7a\x3f\xae\x7f\xc4\x82\xaa\x0d\x5b\x2e\xfe\x52\xae\x00\xcb\x8a\x26\xa9\xe4\x08\xf9\x1e\x29\xe9\x9a\x2b\x82\x2a\xa7\x5b\x4b\x45\x37\x83\x6c\x96\x8a\x7e\x8d\xd3\xdc\x15\xe7\x6c\x96\x16\xd8\x30\x2c\x24\x0f\xce\x3d\x8f\xab\xc5\xb4\x51\x31\x4a\x3e\x70\xc3\xb3\xb4\xf5\x13\x83\xfe\xbd\x16\x58\xab\x12\xa2\xb8\x44\xcd\x63\x53\x72\x26\xb2\x54\x14\xd8\xb4\x52\xfd\x15\x75\x40\x4f\xc3\xf1\x3f\xa9\x46\xf5\x28\x1f\xd7\x1b\xad\xd9\xd3\x3f\xb6\x2c\x4b\x45\x9f\xdc\x4a\x5c\x6c\x88\xee\x8d\xfe\x0a\x00\x00\xff\xff\xd1\x66\xb0\x9f\xba\x03\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 954, mode: os.FileMode(420), modTime: time.Unix(1515130504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/images/favicon.ico": staticImagesFaviconIco,
	"static/images/logo.svg":    staticImagesLogoSvg,
	"static/images/spinner.svg": staticImagesSpinnerSvg,
	"static/index.html":         staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"images": &bintree{nil, map[string]*bintree{
			"favicon.ico": &bintree{staticImagesFaviconIco, map[string]*bintree{}},
			"logo.svg":    &bintree{staticImagesLogoSvg, map[string]*bintree{}},
			"spinner.svg": &bintree{staticImagesSpinnerSvg, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
