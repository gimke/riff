// Code generated by go-bindata.
// sources:
// schema/node.graphql
// schema/schema.graphqls
// schema/service.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaNodeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\xb1\xaa\xc3\x30\x0c\x45\xf7\x7c\x85\xf2\x1b\x1e\xdf\x9b\xba\x84\x82\xc7\xd2\x41\x24\x37\xa9\x21\x95\x8c\x25\x02\xa5\xf4\xdf\x0b\x71\x86\x26\x63\xa1\xe3\x3d\x12\x07\x4e\xe3\x8f\x0c\xea\x74\x00\x3d\x1b\x22\xa2\x81\x9d\xff\x21\x8e\x12\x28\x7a\x49\x32\xb5\x2b\x4f\xf9\xb0\x2d\x62\x1e\x03\xfd\xa9\xce\x60\xa9\x50\xf8\x8e\xfd\x5b\xd6\xe2\x81\x4e\xe2\x75\x1a\xca\x92\x7a\x58\xa0\x4b\x07\xf3\x58\x67\x7b\xad\x47\xe1\x1c\x6f\xea\x7b\x83\x39\xfb\x2a\x65\x47\x25\x0b\x8a\x25\x95\x4d\xfb\x6a\xb6\x06\x98\x7f\x74\xf4\x2a\x63\x9a\xf6\xaa\xdf\xb6\x95\xdc\x9f\x0f\xb5\xdf\x06\xbd\x03\x00\x00\xff\xff\x25\xb6\xf8\xa4\x96\x01\x00\x00")

func schemaNodeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaNodeGraphql,
		"schema/node.graphql",
	)
}

func schemaNodeGraphql() (*asset, error) {
	bytes, err := schemaNodeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/node.graphql", size: 406, mode: os.FileMode(420), modTime: time.Unix(1539223483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSchemaGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xb1\x6e\x83\x30\x10\x86\x77\x3f\xc5\x65\x0b\x52\x9f\xc0\x1b\x4d\x18\x22\x25\x6d\x8a\x69\x97\x8a\xc1\x82\x23\x78\xb0\x49\x6d\x13\x29\xaa\xf2\xee\x95\xcd\x19\x41\x33\xf1\xfb\xbb\xfb\x8f\xdf\x67\xd7\xf4\xa8\x25\xfc\x32\x00\x80\x9f\x11\xed\x9d\xc3\x47\xf8\x44\xa0\x47\x2f\xbd\x1a\x0c\x87\x13\x29\xf6\x60\xcc\xdf\xaf\x38\x35\x91\xcf\x0c\x2d\x6e\x8d\xd4\xc8\x41\x78\xab\xcc\x65\x93\x71\x78\x1b\x5a\x9c\xab\x8e\xc3\x77\x00\x75\x24\x56\x75\x1d\x87\x52\x75\x5d\x3c\x3a\xb4\x37\xb4\x0b\x47\x00\xaa\xf9\x37\xf2\xc5\x79\xe9\xe3\x51\x7a\xcc\x38\x88\xa9\x69\x69\x08\x7f\x21\x5c\xcf\x41\x53\x72\xca\x9a\xae\x44\x7d\xdb\x85\xf5\xb4\x2e\x1d\xcc\x75\xf4\x9b\x3a\x7b\xae\xc4\xe1\x68\x46\x3d\x85\xa1\xc9\xf9\xf1\xf0\x55\x44\x25\x3e\xc5\xb9\xd8\x55\x51\xef\x8b\x7c\x4f\xe5\xe3\x6c\xdb\xe9\x96\x4c\xa2\xca\xcb\x8a\xd4\xfb\x39\x8a\xb2\x98\x60\xba\x40\xd8\x13\x75\x5f\x94\x7f\xb5\xd2\x34\xfd\xbc\x95\x84\x45\x2f\xd7\xec\x86\xd6\xc5\x97\x4b\xf0\xc1\xfe\x02\x00\x00\xff\xff\x74\xf5\xef\x4a\xec\x01\x00\x00")

func schemaSchemaGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphqls,
		"schema/schema.graphqls",
	)
}

func schemaSchemaGraphqls() (*asset, error) {
	bytes, err := schemaSchemaGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphqls", size: 492, mode: os.FileMode(420), modTime: time.Unix(1539223502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaServiceGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xaa\xc3\x30\x0c\x45\x77\x7f\x85\xf2\x1b\x1e\xdf\x9b\x32\x34\x4b\xc6\xd2\xc1\xd8\x6a\x30\x34\x92\x91\x95\x42\x29\xf9\xf7\x52\x27\x25\x38\xa1\xd0\xf1\x5e\xec\xa3\x73\x23\xa5\x49\xe1\x34\xa9\xd3\xc8\xd4\xa3\xdc\xa3\xc7\xb6\x94\x4f\x03\x00\x90\x58\xd4\x42\x4b\xda\x94\xe8\xc7\x60\xe1\x7f\x0c\x4b\x22\x37\xa2\x85\x5e\x25\xd2\xb0\x34\x31\x6d\x79\x36\xc6\xe8\x23\x21\x74\x98\x75\x45\xaf\x54\xcf\x74\x8d\x43\xfd\xf5\x08\xdb\xdd\xce\xea\xb4\xbc\x70\x8a\x85\x5e\xe0\x35\xf8\x08\x21\x0e\x98\x2d\x9c\xdf\x12\x1d\x07\x6c\x2e\x9b\xd8\x6e\xf7\x47\xae\xda\x88\x22\x2c\xdf\x47\xfe\x66\x3e\x79\x8f\x39\x5b\xf8\x63\xbe\xa1\xa3\xc6\xcc\xaf\x00\x00\x00\xff\xff\x70\x2c\xcc\xdb\x79\x01\x00\x00")

func schemaServiceGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaServiceGraphql,
		"schema/service.graphql",
	)
}

func schemaServiceGraphql() (*asset, error) {
	bytes, err := schemaServiceGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/service.graphql", size: 377, mode: os.FileMode(420), modTime: time.Unix(1539223458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/node.graphql":    schemaNodeGraphql,
	"schema/schema.graphqls": schemaSchemaGraphqls,
	"schema/service.graphql": schemaServiceGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"node.graphql":    &bintree{schemaNodeGraphql, map[string]*bintree{}},
		"schema.graphqls": &bintree{schemaSchemaGraphqls, map[string]*bintree{}},
		"service.graphql": &bintree{schemaServiceGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
