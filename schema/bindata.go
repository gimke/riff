// Code generated by go-bindata.
// sources:
// schema.graphqls
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x4d\xcf\xda\x30\x0c\xc7\xef\xfd\x14\xe9\x0d\xa4\x7d\x82\xdc\x78\xe9\x01\x09\x18\x23\x6c\x97\xa9\x87\xa8\x75\xdb\x48\x34\xe9\x12\x17\x09\x4d\xfb\xee\x53\xd2\xf4\x25\x05\xb4\x17\x09\x3d\xa7\xda\x4e\xfc\xf3\xdf\xae\x63\xb2\x0a\x6a\x4e\x7e\x46\x84\x10\xf2\xa3\x05\x7d\xa7\xe4\x8b\xfd\xb8\x40\xdd\x22\x47\xa1\x24\x25\x07\x6f\x45\xbf\xa2\x08\xef\x0d\x74\x97\x7c\x9e\x54\x39\x2c\x24\xaf\x81\x12\x86\x5a\xc8\x32\x5e\x52\x72\x54\x39\x0c\xa7\x86\x92\xef\x36\x90\xba\x88\x16\x45\x41\xc9\x59\x14\x85\x73\x0d\xe8\x1b\xe8\x49\x86\x0d\x88\x6c\x86\xfc\x64\x90\xa3\x73\x39\x82\x2d\xc0\xba\x5b\xd3\x0c\x5b\xc6\x87\xd3\x41\x69\x2f\xdd\x8b\xed\x7b\xf2\xf7\x16\x93\xd4\x43\x78\xb4\x93\x4d\x8b\x71\xba\x7c\x3c\x71\x70\x90\x6d\xdd\xa9\xf1\xe4\xd5\x7e\xf7\x2d\x71\x16\xfb\xca\x4e\xc9\xe6\xe2\xec\x6d\xb2\xda\xfa\xe3\xfd\x90\xb6\xa9\x73\x9f\xc4\x2e\xab\xf3\xc5\x5b\x9f\x4f\xce\x38\x27\x5d\x70\xde\xc0\x54\x96\xcf\x6e\x94\x46\x4a\x76\x12\x63\xe7\x66\x75\x4e\x2d\xbb\xf3\x82\xf1\xb9\x88\x68\x46\xff\x05\xdd\x83\x7b\x92\x73\x40\x6b\xa5\x5f\x93\x9e\xd7\x9a\x49\x33\x6d\x96\x81\x31\x94\xac\x95\xba\x02\x97\xa3\x00\xbb\x07\xbe\x6a\x29\x70\xad\xb9\xcc\xaa\x10\x55\x0a\x64\x15\x0f\x63\x37\xd0\xc6\x6d\xe6\xbc\x1f\xbb\x45\x1e\x97\x73\xe4\x1b\x90\x08\x7f\x10\x2f\x0c\x83\x6b\x31\x91\xf6\x77\x1d\x8d\x8b\x73\x04\x83\x7e\x7e\x71\xb7\xe2\x46\xf2\x86\x55\x0a\x43\x42\xb0\xc2\x61\x1b\x0e\x3b\xf4\x30\xf2\xfa\xff\xa1\x64\x21\xca\x7f\x9d\x79\x50\xae\x87\x87\xe0\x47\xc8\xf0\x5e\xc1\xa0\x1d\x66\x9c\x06\xba\x26\xf3\x7d\x26\xea\xbd\x33\xd7\x4d\x76\x9a\xf5\xf8\xbf\x83\x16\xee\x19\x7d\xe4\xdb\x8a\xdf\xf9\xb8\x7e\x07\x00\x00\xff\xff\x5e\xc3\x3c\xbe\xd9\x05\x00\x00")

func schemaGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphqls,
		"schema.graphqls",
	)
}

func schemaGraphqls() (*asset, error) {
	bytes, err := schemaGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphqls", size: 1497, mode: os.FileMode(420), modTime: time.Unix(1539178192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphqls": schemaGraphqls,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphqls": &bintree{schemaGraphqls, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
