// Code generated by go-bindata.
// sources:
// schema.graphqls
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcb\x6a\xeb\x30\x10\x86\xf7\x7e\x8a\xf1\xee\x1c\xe8\x13\x68\x97\x8b\x17\x81\x34\x4d\xa3\xb4\x9b\x92\x85\xb0\xc7\xb1\x20\x96\x5c\x69\x12\x08\x21\xef\x5e\x74\xb1\x6b\xb9\x85\x42\xa1\x2b\x8f\x3e\xcd\xfc\x33\xf3\xcb\xb6\x6c\xb0\x15\x70\xcb\x00\x00\xde\xcf\x68\xae\x0c\x9e\xdd\xc7\x83\xf6\x4c\x82\xa4\x56\x0c\x1e\x63\x94\xdd\xb3\x8c\xae\x1d\x86\xa4\x58\xa7\x74\x85\xff\x94\x68\x91\x01\x27\x23\xd5\x31\xff\xcf\x60\xa3\x2b\x1c\x6e\x2d\x83\x37\x07\x0e\x9e\x18\x59\xd7\x0c\x76\xb2\xae\xfd\xd1\xa2\xb9\xa0\x19\x55\x38\x20\xcb\x89\xe4\x83\x25\x41\xfe\x28\x08\x5d\x03\x1e\xb2\xc6\x15\xae\x4d\xc4\x87\x61\xd2\x7e\x74\xb8\x65\x8e\xa1\x3a\xb7\x41\x24\x4e\x3f\x5b\xaf\x5e\x0b\x1f\xf1\x17\xbe\x2d\x16\x7b\x1f\x2f\x8b\xd9\x32\x5e\xaf\x87\xb2\x45\x5b\xc5\x22\xbe\x9f\xed\xf6\x31\x7a\xda\xfa\x60\x57\x04\xd8\xf7\x75\xfb\xc5\xec\xa3\xa4\xb9\x11\xaa\x6c\x86\x6d\x7a\xcc\x1b\x91\xb2\x0b\x1a\xeb\x1d\xef\xe1\x3d\xa8\x39\x73\xa2\x5a\x25\x48\x2c\x50\x91\xf3\x6c\x5c\x2a\xbb\xc9\xd9\x72\x3c\xd5\x0c\xe6\x5a\x9f\x50\xa8\x00\x13\x4f\x3d\xe9\xb4\x21\x06\x2b\x45\xf9\xd4\xca\x0d\x5a\x8a\x76\xe6\xe1\xe5\xac\x12\x1d\x6f\x34\xa5\x0a\xc9\xcb\xa4\x5b\x78\xd9\x7e\x85\x4f\xb9\xb8\x49\xa9\x55\x2d\x8f\xa9\xd8\xcf\x03\x26\xdd\xa2\x76\xaa\xfb\x55\x63\xf8\x09\xd1\x92\xb3\x32\x3f\x8c\xa7\x1a\x99\xfb\xdd\x48\x7f\x6b\xb8\xe9\xca\xed\x64\xc3\xdf\xb9\xfc\x11\x00\x00\xff\xff\x52\x6d\x1b\x61\xcc\x03\x00\x00")

func schemaGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphqls,
		"schema.graphqls",
	)
}

func schemaGraphqls() (*asset, error) {
	bytes, err := schemaGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphqls", size: 972, mode: os.FileMode(420), modTime: time.Unix(1539165769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphqls": schemaGraphqls,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphqls": &bintree{schemaGraphqls, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

