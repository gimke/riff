// Code generated by go-bindata.
// sources:
// schema.graphqls
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphqls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xcd\x8e\xe2\x30\x0c\xc7\xef\x7d\x8a\xf4\x06\xd2\x3e\x41\x6e\x7c\xf4\x80\x04\x2c\x4b\xd8\xbd\xac\x7a\x88\x5a\xb7\x8d\x44\x93\x4e\xe2\x22\xa1\x11\xef\x3e\x4a\x9a\x96\xa6\x30\x9a\x0f\x69\x4e\xf8\x23\xfe\xf9\x6f\xe3\x9a\xac\x82\x9a\x93\xd7\x88\x10\x42\x5e\x5a\xd0\x57\x4a\xfe\xd8\x1f\x17\xa8\x5b\xe4\x28\x94\xa4\x64\xe7\xad\xe8\x16\x45\x78\x6d\xa0\x7b\xe4\xeb\xa4\xca\x61\x26\x79\x0d\x94\x30\xd4\x42\x96\xf1\x9c\x92\xbd\xca\x61\xc8\x1a\x4a\xfe\xdb\x40\xea\x22\x5a\x14\x05\x25\x47\x51\x14\xce\x35\xa0\x2f\xa0\x47\x15\x36\x20\xb2\x09\xf2\x97\x41\x8e\xce\xe5\x08\xb6\x01\xeb\x5e\x8d\x2b\x6c\x1b\x1f\x4e\x07\xa5\xbd\x74\x2f\xb6\x9f\xc9\xbf\x9b\x8d\x4a\x77\x61\x6a\x23\x9b\x16\xd3\xf9\x63\xc2\xb1\x41\xb6\x75\x27\xc6\x83\x17\xdb\xcd\xbf\xc4\x59\xec\x2f\x3b\x24\xab\x93\xb3\xd7\xc9\x62\xed\xd3\xdb\xa1\x6c\x55\xe7\xbe\x88\x9d\x16\xc7\x93\xb7\x7e\x1f\x9c\x71\x4c\xba\xe0\x2d\x94\x3f\x16\xe5\x8b\x1b\xa5\x91\x92\x8d\xc4\xd8\xb9\x59\x9d\x53\x8b\xee\xbc\x60\x79\x2e\x22\x9a\xbb\xff\x1c\xee\xb9\x3d\xc8\x39\xa0\xb5\xd2\xef\x83\x9e\xb7\x9a\x28\x33\x6d\x96\x81\x31\x94\x2c\x95\x3a\x03\x97\x43\x7f\x7b\x03\xbe\x69\x29\x70\xa9\xb9\xcc\xaa\x90\x54\x0a\x64\x15\x0f\x63\x17\xd0\xc6\x5d\xe5\x64\x1a\x7b\x40\x9e\x96\x73\xe4\x2b\x90\x08\x1f\x48\x17\x86\xc1\xb9\x18\x09\xfb\xdc\x3c\xf7\x9b\xd9\x83\x41\xbf\xbd\xb8\xbb\x6e\x23\x79\xc3\x2a\x85\x21\x21\xb8\xde\x70\x0a\x87\xed\x47\xb8\xe3\xfa\x3f\x43\xc9\x42\x94\x5f\x5d\x78\xd0\xcd\xb3\x43\xee\x23\x63\xf8\x50\xc1\xa0\x5d\x65\x9c\x8e\x55\x8d\x96\xfb\x4c\xd2\xcf\x2e\x5c\x37\xd9\x61\x32\xe1\xf7\xb6\xfc\x16\x00\x00\xff\xff\xb3\xb5\x4b\x59\xf0\x04\x00\x00")

func schemaGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphqls,
		"schema.graphqls",
	)
}

func schemaGraphqls() (*asset, error) {
	bytes, err := schemaGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphqls", size: 1264, mode: os.FileMode(420), modTime: time.Unix(1539167328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphqls": schemaGraphqls,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphqls": &bintree{schemaGraphqls, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

